name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Copy JAR to artifacts
        run: |
          mkdir -p artifacts
          cp target/*.jar artifacts/app.jar
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: artifacts/app.jar

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: artifacts
      - name: Run tests (PMD, Newman)
        run: mvn verify -Dpmd.skip=false -Dnewman.skip=true
      - name: Copy test reports
        run: |
          mkdir -p test-reports
          cp -r target/site test-reports/
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: test-reports/

  build_and_publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Copy JAR to artifacts
        run: |
          mkdir -p artifacts
          cp target/*.jar artifacts/app.jar
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set version
        id: version
        run: |
          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
          else
            VERSION=0.1.0
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        run: |
          mkdir -p jar && cp artifacts/app.jar jar/app.jar
          docker build -t gauravtalele32/nl-sb-assignement:${{ steps.version.outputs.version }} .
          docker tag gauravtalele32/nl-sb-assignement:${{ steps.version.outputs.version }} gauravtalele32/nl-sb-assignement:latest
          docker push gauravtalele32/nl-sb-assignement:latest
      # - name: Create Git tag
      #   run: |
      #     git config user.name gaurav9969351313
      #     git tag -a v${{ steps.version.outputs.version }} -m "Release version ${{ steps.version.outputs.version }}"
      #     git push origin v${{ steps.version.outputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_publish
    steps:
      - uses: actions/checkout@v4
      - name: Set version
        id: version
        run: |
          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
          else
            VERSION=0.1.0
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Install Render CLI
        run: curl -fsSL https://raw.githubusercontent.com/render-oss/cli/refs/heads/main/bin/install.sh | sh
      - name: Deploy to Render
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK }}
          image-url: gauravtalele32/nl-sb-assignement:latest
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true